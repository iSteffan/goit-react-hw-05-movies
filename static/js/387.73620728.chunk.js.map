{"version":3,"file":"static/js/387.73620728.chunk.js","mappings":"4QAEaA,EAAQC,EAAAA,GAAAA,IAAH,0DAKLC,EAAOD,EAAAA,GAAAA,GAAH,6C,kBCuDjB,EAxDa,WACX,OAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAoCH,EAAAA,EAAAA,WAAS,GAA7C,eAAOK,EAAP,KAAmBC,EAAnB,KACA,GAAsDN,EAAAA,EAAAA,WAAS,GAA/D,eAAOO,EAAP,KAA4BC,EAA5B,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACRH,GAAc,GACd,IAAMI,EAAc,mCAAG,WAAMP,GAAN,mGAEIQ,EAAAA,EAAAA,IAAaR,GAFjB,gBAEXF,EAFW,EAEXA,KAERC,EAAQD,GAJW,gDAMnBW,QAAQC,IAAI,KAAMC,SANC,yBAQnBR,GAAc,GACdE,GAAuB,GATJ,4EAAH,sDAapBE,EAAeP,EAChB,GAAE,CAACA,KAGF,gCACGE,IAAc,SAACU,EAAA,EAAD,IACdR,GAAuC,IAAhBN,EAAKe,QAC3B,wEAEA,SAACjB,EAAD,UACGE,EAAKgB,KAAI,SAAAC,GAAK,OACb,0BACGA,EAAMC,cACL,SAACtB,EAAD,CACEuB,IAAG,0CAAqCF,EAAMC,cAC9CE,IAAKH,EAAMI,QAGb,SAACzB,EAAD,CACEuB,IACE,oEAEFC,IAAKH,EAAMI,QAGf,wBAAKJ,EAAMI,QACX,uCAAeJ,EAAMK,eAfdL,EAAMM,QADF,QAuBxB,C,4EC1DYT,EAAS,WACpB,OACE,SAAC,KAAD,CACEU,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,UACNC,UAAU,qBACVC,aAAc,CAAEC,eAAgB,UAChCC,iBAAiB,SACjBC,SAAS,GAGd,C,+LCbKC,EAAW,6BACXC,EAAU,mCAEHC,EAAiB,mCAAG,sGACRC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,yCACuBC,IAFf,uBACvBG,EADuB,EACvBA,KADuB,kBAKxBA,GALwB,2CAAH,qDAQjBC,EAAY,mCAAG,WAAMpC,GAAN,yFACHkC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACE/B,EADF,oBACqBgC,EADrB,oBADG,uBAClBG,EADkB,EAClBA,KADkB,kBAKnBA,GALmB,2CAAH,sDAQZ3B,EAAY,mCAAG,WAAMR,GAAN,yFACHkC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACE/B,EADF,4BAC6BgC,EAD7B,oBADG,uBAClBG,EADkB,EAClBA,KADkB,kBAKnBA,GALmB,2CAAH,sDAQZE,EAAe,mCAAG,WAAMrC,GAAN,yFACNkC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACE/B,EADF,6BAC8BgC,EAD9B,2BADM,uBACrBG,EADqB,EACrBA,KADqB,kBAKtBA,GALsB,2CAAH,sDAQfG,EAAiB,mCAAG,WAAMC,GAAN,yFACRL,EAAAA,EAAAA,IAAA,UAClBH,EADkB,mCACiBC,EADjB,iCACiDO,EADjD,gCADQ,uBACvBJ,EADuB,EACvBA,KADuB,kBAKxBA,GALwB,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/Loader/Loader.jsx","services/api.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Image = styled.img`\n  width: 100px;\n  height: auto;\n`;\n\nexport const List = styled.ul`\n  list-style: none;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'services/api';\nimport { Image, List } from './Cast.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n  const [showLoader, setShowLoader] = useState(false);\n  const [isContentDownloaded, setIsContentDownloaded] = useState(false);\n\n  useEffect(() => {\n    setShowLoader(true);\n    const fetchMovieCast = async movieId => {\n      try {\n        const { cast } = await getMovieCast(movieId);\n        // console.log(cast);\n        setCast(cast);\n      } catch (error) {\n        console.log(error.message);\n      } finally {\n        setShowLoader(false);\n        setIsContentDownloaded(true);\n      }\n    };\n\n    fetchMovieCast(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {showLoader && <Loader />}\n      {isContentDownloaded && cast.length === 0 ? (\n        <p>Sorry, Cast is not available for this movie</p>\n      ) : (\n        <List>\n          {cast.map(actor => (\n            <li key={actor.cast_id}>\n              {actor.profile_path ? (\n                <Image\n                  src={`https://image.tmdb.org/t/p/w400/${actor.profile_path}`}\n                  alt={actor.name}\n                />\n              ) : (\n                <Image\n                  src={\n                    'https://via.placeholder.com/400x600.png?text=Poster+Not+Available'\n                  }\n                  alt={actor.name}\n                />\n              )}\n              <h3>{actor.name}</h3>\n              <p>Character: {actor.character}</p>\n            </li>\n          ))}\n        </List>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import { ThreeDots } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <ThreeDots\n      height=\"80\"\n      width=\"80\"\n      radius=\"9\"\n      color=\"#4fa94d\"\n      ariaLabel=\"three-dots-loading\"\n      wrapperStyle={{ justifyContent: 'center' }}\n      wrapperClassName=\"loader\"\n      visible={true}\n    />\n  );\n};\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org';\nconst API_KEY = '8776cc9f66dd32d7c5ecc9b66eb74c99';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/trending/movie/day?api_key=${API_KEY}`\n  );\n\n  return data;\n};\n\nexport const getMovieById = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const getMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/movie/${movieId}}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return data;\n};\n\nexport const getMovieByKeyword = async query => {\n  const { data } = await axios.get(\n    `${BASE_URL}/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n\n  return data;\n};\n"],"names":["Image","styled","List","useState","cast","setCast","movieId","useParams","showLoader","setShowLoader","isContentDownloaded","setIsContentDownloaded","useEffect","fetchMovieCast","getMovieCast","console","log","message","Loader","length","map","actor","profile_path","src","alt","name","character","cast_id","height","width","radius","color","ariaLabel","wrapperStyle","justifyContent","wrapperClassName","visible","BASE_URL","API_KEY","getTrendingMovies","axios","data","getMovieById","getMovieReviews","getMovieByKeyword","query"],"sourceRoot":""}